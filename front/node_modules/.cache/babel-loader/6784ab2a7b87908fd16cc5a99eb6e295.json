{"ast":null,"code":"var _jsxFileName = \"/home/morgane/Documents/alohomora/front/src/component/Users/Inscription.jsx\";\nimport React, { Component } from \"react\";\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\nimport axios from \"axios\";\n\nclass Inscription extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      password: \"\"\n    };\n    this.onChange = this.onChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  async submitForm(e) {\n    e.preventDefault();\n    const _this$state = this.state,\n          name = _this$state.name,\n          password = _this$state.password;\n    await axios.post(\"/alohomora/inscription\", {\n      name,\n      password\n    }).then(res => {\n      if (res.error) {\n        alert(res.error);\n      }\n    }).catch(e => {\n      console.error(e);\n      alert(\"ajout d'un ingrédient\");\n    });\n  }\n\n  render() {\n    return React.createElement(AvForm, {\n      className: \"Form_Connexion\",\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(AvField, {\n      name: \"name\",\n      type: \"name\",\n      label: \"Pseudonyme :\",\n      onChange: this.onChange,\n      value: this.state.name,\n      validate: {\n        required: {\n          value: true,\n          errorMessage: \"Entrez un pseudonyme ici\"\n        },\n        pattern: {\n          value: \"^[A-Za-z0-9]+$\",\n          errorMessage: \"Votre nom ne peut contenir que des lettres et des chiffres\"\n        },\n        minLength: {\n          value: 4,\n          errorMessage: \"Votre nom doit contenir au minimum 4 caractères\"\n        },\n        maxLength: {\n          value: 16,\n          errorMessage: \"Votre nom ne peut excéder 16 caractères\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(AvField, {\n      name: \"password\",\n      type: \"password\",\n      label: \"Mot de passe :\",\n      onChange: this.onChange,\n      value: this.state.password,\n      validate: {\n        required: {\n          value: true,\n          errorMessage: \"Entrez un mot de passe ici\"\n        },\n        pattern: {\n          value: \"^[A-Za-z0-9]+$\",\n          errorMessage: \"Votre mot de passe ne peut contenir que des lettres et des chiffres\"\n        },\n        minLength: {\n          value: 8,\n          errorMessage: \"Votre mot de passe doit contenir au minimum 8 caractères\"\n        },\n        maxLength: {\n          value: 30,\n          errorMessage: \"Votre mot de passe ne peut excéder 30 caractères\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Valider\"));\n  }\n\n}\n\nexport default Inscription;","map":{"version":3,"sources":["/home/morgane/Documents/alohomora/front/src/component/Users/Inscription.jsx"],"names":["React","Component","AvForm","AvField","axios","Inscription","constructor","props","state","name","password","onChange","bind","submitForm","e","setState","target","value","preventDefault","post","then","res","error","alert","catch","console","render","required","errorMessage","pattern","minLength","maxLength"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\nimport axios from \"axios\";\n\nclass Inscription extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      password: \"\"\n    };\n    this.onChange = this.onChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  async submitForm(e) {\n    e.preventDefault();\n    const { name, password } = this.state;\n    await axios\n      .post(\"/alohomora/inscription\", {\n        name,\n        password\n      })\n      .then(res => {\n        if (res.error) {\n          alert(res.error);\n        }\n      })\n      .catch(e => {\n        console.error(e);\n        alert(\"ajout d'un ingrédient\");\n      });\n  }\n\n  render() {\n    return (\n      <AvForm className=\"Form_Connexion\" onSubmit={this.submitForm}>\n        <AvField\n          name=\"name\"\n          type=\"name\"\n          label=\"Pseudonyme :\"\n          onChange={this.onChange}\n          value={this.state.name}\n          validate={{\n            required: { value: true, errorMessage: \"Entrez un pseudonyme ici\" },\n            pattern: {\n              value: \"^[A-Za-z0-9]+$\",\n              errorMessage:\n                \"Votre nom ne peut contenir que des lettres et des chiffres\"\n            },\n            minLength: {\n              value: 4,\n              errorMessage: \"Votre nom doit contenir au minimum 4 caractères\"\n            },\n            maxLength: {\n              value: 16,\n              errorMessage: \"Votre nom ne peut excéder 16 caractères\"\n            }\n          }}\n        />\n\n        <AvField\n          name=\"password\"\n          type=\"password\"\n          label=\"Mot de passe :\"\n          onChange={this.onChange}\n          value={this.state.password}\n          validate={{\n            required: {\n              value: true,\n              errorMessage: \"Entrez un mot de passe ici\"\n            },\n            pattern: {\n              value: \"^[A-Za-z0-9]+$\",\n              errorMessage:\n                \"Votre mot de passe ne peut contenir que des lettres et des chiffres\"\n            },\n            minLength: {\n              value: 8,\n              errorMessage:\n                \"Votre mot de passe doit contenir au minimum 8 caractères\"\n            },\n            maxLength: {\n              value: 30,\n              errorMessage: \"Votre mot de passe ne peut excéder 30 caractères\"\n            }\n          }}\n        />\n        <button color=\"primary\">Valider</button>\n      </AvForm>\n    );\n  }\n}\n\nexport default Inscription;\n"]},"metadata":{},"sourceType":"module"}